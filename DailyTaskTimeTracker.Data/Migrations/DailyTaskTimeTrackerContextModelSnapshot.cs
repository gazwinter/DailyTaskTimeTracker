// <auto-generated />
using System;
using DailyTaskTimeTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DailyTaskTimeTracker.Data.Migrations
{
    [DbContext(typeof(DailyTaskTimeTrackerContext))]
    partial class DailyTaskTimeTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.TaskBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArchivedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BreakFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BreakStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalBreakTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskHistoryId");

                    b.ToTable("TaskBreaks");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArchivedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Repeatable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Started")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskName")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArchivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.TaskBreak", b =>
                {
                    b.HasOne("DailyTaskTimeTracker.Data.Entities.TaskHistory", "History")
                        .WithMany("Breaks")
                        .HasForeignKey("TaskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.TaskHistory", b =>
                {
                    b.HasOne("DailyTaskTimeTracker.Data.Entities.UserProfile", "User")
                        .WithMany("TaskHistories")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.TaskHistory", b =>
                {
                    b.Navigation("Breaks");
                });

            modelBuilder.Entity("DailyTaskTimeTracker.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("TaskHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
